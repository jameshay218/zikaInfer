// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// toUnitScale
double toUnitScale(double x, double min, double max);
RcppExport SEXP zikaProj_toUnitScale(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    __result = Rcpp::wrap(toUnitScale(x, min, max));
    return __result;
END_RCPP
}
// fromUnitScale
double fromUnitScale(double x, double min, double max);
RcppExport SEXP zikaProj_fromUnitScale(SEXP xSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    __result = Rcpp::wrap(fromUnitScale(x, min, max));
    return __result;
END_RCPP
}
// likelihood
double likelihood(NumericMatrix dat, NumericMatrix alphas, NumericVector mus, NumericVector sds);
RcppExport SEXP zikaProj_likelihood(SEXP datSEXP, SEXP alphasSEXP, SEXP musSEXP, SEXP sdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sds(sdsSEXP);
    __result = Rcpp::wrap(likelihood(dat, alphas, mus, sds));
    return __result;
END_RCPP
}
// likelihood_threshold
double likelihood_threshold(NumericMatrix dat, NumericMatrix alphas, NumericVector mus, NumericVector sds, double threshold);
RcppExport SEXP zikaProj_likelihood_threshold(SEXP datSEXP, SEXP alphasSEXP, SEXP musSEXP, SEXP sdsSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    __result = Rcpp::wrap(likelihood_threshold(dat, alphas, mus, sds, threshold));
    return __result;
END_RCPP
}
// calculate_alphas
NumericVector calculate_alphas(NumericMatrix y, double probMicro, int sampFreq);
RcppExport SEXP zikaProj_calculate_alphas(SEXP ySEXP, SEXP probMicroSEXP, SEXP sampFreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type probMicro(probMicroSEXP);
    Rcpp::traits::input_parameter< int >::type sampFreq(sampFreqSEXP);
    __result = Rcpp::wrap(calculate_alphas(y, probMicro, sampFreq));
    return __result;
END_RCPP
}
// scaletuning2
double scaletuning2(double step, double popt, double pcur);
RcppExport SEXP zikaProj_scaletuning2(SEXP stepSEXP, SEXP poptSEXP, SEXP pcurSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< double >::type popt(poptSEXP);
    Rcpp::traits::input_parameter< double >::type pcur(pcurSEXP);
    __result = Rcpp::wrap(scaletuning2(step, popt, pcur));
    return __result;
END_RCPP
}
// proposal_function
double proposal_function(double current, double lower, double upper, double step);
RcppExport SEXP zikaProj_proposal_function(SEXP currentSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type current(currentSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    __result = Rcpp::wrap(proposal_function(current, lower, upper, step));
    return __result;
END_RCPP
}
